{"ts":1360301132465,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1360301149264,"patch":[[{"diffs":[[1,"var async = require('async'); \r\nasync.parallel([\r\n\r\n  // 첫번째 실행\r\n  // 다음 task으로 이동하기 위해서는 callback을 실행해야하고,\r\n  // 사용방법은 callback(에러, 결과값[, 결과값#2...]) 형태로 사용됩니다.\r\n  // -----------------------------------------------------\r\n\r\n  function(callback) {\r\n    setTimeout(function() {\r\n      console.log('--- async.parallel::ste#1 ---');\r\n\r\n      // 다음 task으로 이동하기 위해 callback 실행\r\n      // one값 전달\r\n      callback(null, 'one');   \r\n    }, 200);\r\n  },\r\n\r\n  function(callback) {          \r\n    setTimeout(function(){\r\n      console.log('--- async.parallel::ste#2 ---');\r\n\r\n      // 다음 task으로 이동하기 위해 callback 실행\r\n      // two값 전달\r\n      callback(null, 'two');\r\n    }, 100);\r\n  },\r\n],\r\n\r\n// 모든 task를 끝내고, 아래 callback으로 에러와 배열인자가 전달됩니다.\r\n// ------------------------------------------------------\r\n\r\nfunction(err, results) {\r\n  console.log('--- async parallel result #1 ---');\r\n  console.log(arguments);\r\n});"]],"start1":0,"start2":0,"length1":0,"length2":894}]],"length":894,"saved":false}
{"ts":1360301375812,"patch":[[{"diffs":[[0,"\r\n  },\r\n"],[1,"  \r\n  function(callback) {          \r\n    setTimeout(function(){\r\n      console.log('--- async.parallel::ste#3 ---');\r\n\r\n      // 다음 task으로 이동하기 위해 callback 실행\r\n      // three값 전달\r\n      callback(null, 'three');\r\n    }, 10);\r\n  },\r\n"],[0,"],\r\n\r\n//"]],"start1":662,"start2":662,"length1":16,"length2":248}]],"length":1126,"saved":false}
{"ts":1360301387309,"patch":[[{"diffs":[[0,"\n    }, "],[-1,"1"],[1,"30"],[0,"0);\r\n  }"]],"start1":882,"start2":882,"length1":17,"length2":18}]],"length":1127,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361512602506,"patch":[[{"diffs":[[0,"  }, 200"],[1,"0"],[0,");\r\n  },"]],"start1":425,"start2":425,"length1":16,"length2":17}]],"length":1128,"saved":false}
