{"ts":1360301785832,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1360301803424,"patch":[[{"diffs":[[1,"var async = require('async');\r\nasync.waterfall([\r\n\r\n  function(callback) {\r\n    console.log('--- async.waterfall #1 ---');\r\n\r\n    // 여기서도 series, parallel과 마찬가지로\r\n    // callback의 실행은 다음 task 으로 넘기기 위한것입니다.\r\n    //\r\n    // parallel의 다른점은\r\n    // callback의 결과가 다음 task으로 전달되는 점입니다.\r\n\r\n    callback(null, 'one', 'two');\r\n  },\r\n\r\n\r\n  // 첫번째 task에서 전달된 one, two 값을 인자로 받게 됩니다.\r\n  function(arg1, arg2, callback) {\r\n    console.log('--- async.waterfall #2 ---');\r\n    console.log(arguments);\r\n    callback(null, 'three');\r\n  },\r\n\r\n\r\n  function(arg1, callback) {\r\n    console.log('--- async.waterfall #3 ---');\r\n    console.log(arguments);\r\n\r\n\r\n    // 마지막 task의 callback에 전달한 인수값이\r\n    // 마지막 callback에 전달됩니다.\r\n    callback(null, 'done');\r\n  }\r\n],\r\n\r\n// 마지막 함수에서 callback으로 전달한 인자가 넘어옵니다.\r\nfunction(err, results) {\r\n  console.log('--- async.waterfall result #1 ---');\r\n  console.log(arguments);\r\n});"]],"start1":0,"start2":0,"length1":0,"length2":892}]],"length":892,"saved":false}
