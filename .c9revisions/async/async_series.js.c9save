{"ts":1360301985627,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1360302008521,"patch":[[{"diffs":[[1,"var async = require('async'); \r\nasync.series([\r\n\r\n  // 첫번째 실행\r\n  // async의 프로세스 흐름을 도와줄 수 있는 callback이 전달됩니다.\r\n  // 이를 이용하여 흐름을 제어할 수 있는것입니다.\r\n  // 즉, 다음 task으로 이동하기 위해서는 callback을 실행해야 합니다.\r\n  // 사용방법은 callback(에러, 결과값) 형태로 사용됩니다.\r\n  // -----------------------------------------------------\r\n\r\n  function(callback) {\r\n    console.log('--- async.series::ste#1 ---');\r\n\r\n    // 다음 task으로 이동하기 위해 실행\r\n    // 첫번째 인수로 에러\r\n    // 두번째부터는 마지막 callback에 전달할 값들을 설정할 수 있습니다.\r\n    // 예) callback(null, 'one' [, value ...]);\r\n    // ---------------------------------------------------------\r\n\r\n    callback(null, 'one');\r\n\r\n    // 예) 첫번째 인수로 에러를 발생시킬 경우\r\n    // 만약 이곳에서 첫번째 인수를 new Error('error message')를 전달하면\r\n    // 선언된 tasks의 동작은 여기서 멈추고,\r\n    // 마지막 callback으로 프로세스 진행이 넘어갑니다.\r\n    // ----------------------------------------------------------\r\n\r\n    // callback(new Error('error message'), null);\r\n  },\r\n\r\n\r\n  // 두번째 실행\r\n  // -----------\r\n\r\n  function(callback) {\r\n    console.log('--- async.series::ste#2 ---');\r\n\r\n    // 다음 task으로 이동하기 위해 실행\r\n    // 에러는 null, 전달할 결과값은 'two'    \r\n    callback(null, 'two');\r\n  }\r\n],\r\n\r\n// 모든 task를 끝내고, 아래 callback으로 에러와 배열인자가 전달됩니다.\r\n// ------------------------------------------------------\r\n\r\nfunction(err, results) {\r\n  console.log('--- async.series result ---');\r\n  console.log(arguments);\r\n});"]],"start1":0,"start2":0,"length1":0,"length2":1329}]],"length":1329,"saved":false}
