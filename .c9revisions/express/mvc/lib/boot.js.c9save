{"ts":1360826437680,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1360826488096,"patch":[[{"diffs":[[1,"var express = require('../../..')\r\n  , fs = require('fs');\r\n\r\nmodule.exports = function(parent, options){\r\n  var verbose = options.verbose;\r\n  fs.readdirSync(__dirname + '/../controllers').forEach(function(name){\r\n    verbose && console.log('\\n   %s:', name);\r\n    var obj = require('./../controllers/' + name)\r\n      , name = obj.name || name\r\n      , prefix = obj.prefix || ''\r\n      , app = express()\r\n      , method\r\n      , path;\r\n\r\n    // allow specifying the view engine\r\n    if (obj.engine) app.set('view engine', obj.engine);\r\n    app.set('views', __dirname + '/../controllers/' + name + '/views');\r\n\r\n    // before middleware support\r\n    if (obj.before) {\r\n      path = '/' + name + '/:' + name + '_id';\r\n      app.all(path, obj.before);\r\n      verbose && console.log('     ALL %s -> before', path);\r\n      path = '/' + name + '/:' + name + '_id/*';\r\n      app.all(path, obj.before);\r\n      verbose && console.log('     ALL %s -> before', path);\r\n    }\r\n\r\n    // generate routes based\r\n    // on the exported methods\r\n    for (var key in obj) {\r\n      // \"reserved\" exports\r\n      if (~['name', 'prefix', 'engine', 'before'].indexOf(key)) continue;\r\n      // route exports\r\n      switch (key) {\r\n        case 'show':\r\n          method = 'get';\r\n          path = '/' + name + '/:' + name + '_id';\r\n          break;\r\n        case 'list':\r\n          method = 'get';\r\n          path = '/' + name + 's';\r\n          break;\r\n        case 'edit':\r\n          method = 'get';\r\n          path = '/' + name + '/:' + name + '_id/edit';\r\n          break;\r\n        case 'update':\r\n          method = 'put';\r\n          path = '/' + name + '/:' + name + '_id';\r\n          break;\r\n        case 'create':\r\n          method = 'post';\r\n          path = '/' + name;\r\n          break;\r\n        case 'index':\r\n          method = 'get';\r\n          path = '/';\r\n          break;\r\n        default:\r\n          throw new Error('unrecognized route: ' + name + '.' + key);\r\n      }\r\n\r\n      path = prefix + path;\r\n      app[method](path, obj[key]);\r\n      verbose && console.log('     %s %s -> %s', method.toUpperCase(), path, key);\r\n    }\r\n\r\n    // mount the app\r\n    parent.use(app);\r\n  });"]],"start1":0,"start2":0,"length1":0,"length2":2172}]],"length":2172,"saved":false}
{"ts":1360826500050,"patch":[[{"diffs":[[0,"re('"],[-1,"../../.."],[1,"express"],[0,"')\r\n"]],"start1":19,"start2":19,"length1":16,"length2":15}]],"length":2171,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360826750886,"patch":[[{"diffs":[[-1,"var express = require('express')\r\n  , fs = require('fs');\r\n\r\nmodule.exports = function(parent, options){\r\n  var verbose = options.verbose;\r\n  fs.readdirSync(__dirname + '/../controllers').forEach(function(name){\r\n    verbose && console.log('\\n   %s:', name);\r\n    var obj = require('./../controllers/' + name)\r\n      , name = obj.name || name\r\n      , prefix = obj.prefix || ''\r\n      , app = express()\r\n      , method\r\n      , path;\r\n\r\n    // allow specifying the view engine\r\n    if (obj.engine) app.set('view engine', obj.engine);\r\n    app.set('views', __dirname + '/../controllers/' + name + '/views');\r\n\r\n    // before middleware support\r\n    if (obj.before) {\r\n      path = '/' + name + '/:' + name + '_id';\r\n      app.all(path, obj.before);\r\n      verbose && console.log('     ALL %s -> before', path);\r\n      path = '/' + name + '/:' + name + '_id/*';\r\n      app.all(path, obj.before);\r\n      verbose && console.log('     ALL %s -> before', path);\r\n    }\r\n\r\n    // generate routes based\r\n    // on the exported methods\r\n    for (var key in obj) {\r\n      // \"reserved\" exports\r\n      if (~['name', 'prefix', 'engine', 'before'].indexOf(key)) continue;\r\n      // route exports\r\n      switch (key) {\r\n        case 'show':\r\n          method = 'get';\r\n          path = '/' + name + '/:' + name + '_id';\r\n          break;\r\n        case 'list':\r\n          method = 'get';\r\n          path = '/' + name + 's';\r\n          break;\r\n        case 'edit':\r\n          method = 'get';\r\n          path = '/' + name + '/:' + name + '_id/edit';\r\n          break;\r\n        case 'update':\r\n          method = 'put';\r\n          path = '/' + name + '/:' + name + '_id';\r\n          break;\r\n        case 'create':\r\n          method = 'post';\r\n          path = '/' + name;\r\n          break;\r\n        case 'index':\r\n          method = 'get';\r\n          path = '/';\r\n          break;\r\n        default:\r\n          throw new Error('unrecognized route: ' + name + '.' + key);\r\n      }\r\n\r\n      path = prefix + path;\r\n      app[method](path, obj[key]);\r\n      verbose && console.log('     %s %s -> %s', method.toUpperCase(), path, key);\r\n    }\r\n\r\n    // mount the app\r\n    parent.use(app);\r\n  });"]],"start1":0,"start2":0,"length1":2171,"length2":0}]],"length":0,"saved":false}
{"ts":1360826838030,"patch":[[{"diffs":[[1,"var express = require('express')\r\n  , fs = require('fs');\r\n\r\nmodule.exports = function(parent, options){\r\n  var verbose = options.verbose;\r\n  fs.readdirSync(__dirname + '/../controllers').forEach(function(name){\r\n    verbose && console.log('\\n   %s:', name);\r\n    var obj = require('./../controllers/' + name)\r\n      , name = obj.name || name\r\n      , prefix = obj.prefix || ''\r\n      , app = express()\r\n      , method\r\n      , path;\r\n\r\n    // allow specifying the view engine\r\n    if (obj.engine) app.set('view engine', obj.engine);\r\n    app.set('views', __dirname + '/../controllers/' + name + '/views');\r\n\r\n    // before middleware support\r\n    if (obj.before) {\r\n      path = '/' + name + '/:' + name + '_id';\r\n      app.all(path, obj.before);\r\n      verbose && console.log('     ALL %s -> before', path);\r\n      path = '/' + name + '/:' + name + '_id/*';\r\n      app.all(path, obj.before);\r\n      verbose && console.log('     ALL %s -> before', path);\r\n    }\r\n\r\n    // generate routes based\r\n    // on the exported methods\r\n    for (var key in obj) {\r\n      // \"reserved\" exports\r\n      if (~['name', 'prefix', 'engine', 'before'].indexOf(key)) continue;\r\n      // route exports\r\n      switch (key) {\r\n        case 'show':\r\n          method = 'get';\r\n          path = '/' + name + '/:' + name + '_id';\r\n          break;\r\n        case 'list':\r\n          method = 'get';\r\n          path = '/' + name + 's';\r\n          break;\r\n        case 'edit':\r\n          method = 'get';\r\n          path = '/' + name + '/:' + name + '_id/edit';\r\n          break;\r\n        case 'update':\r\n          method = 'put';\r\n          path = '/' + name + '/:' + name + '_id';\r\n          break;\r\n        case 'create':\r\n          method = 'post';\r\n          path = '/' + name;\r\n          break;\r\n        case 'index':\r\n          method = 'get';\r\n          path = '/';\r\n          break;\r\n        default:\r\n          throw new Error('unrecognized route: ' + name + '.' + key);\r\n      }\r\n\r\n      path = prefix + path;\r\n      app[method](path, obj[key]);\r\n      verbose && console.log('     %s %s -> %s', method.toUpperCase(), path, key);\r\n    }\r\n\r\n    // mount the app\r\n    parent.use(app);\r\n  });\r\n};"]],"start1":0,"start2":0,"length1":0,"length2":2175}]],"length":2175,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360829812247,"patch":[[{"diffs":[[0,"name){\r\n    "],[1,"//"],[0,"verbose && c"]],"start1":205,"start2":205,"length1":24,"length2":26}]],"length":2177,"saved":false}
{"ts":1360829831548,"patch":[[{"diffs":[[0,"){\r\n    "],[-1,"//"],[0,"verbose "]],"start1":209,"start2":209,"length1":18,"length2":16}]],"length":2175,"saved":false}
{"ts":1360829912259,"patch":[[{"diffs":[[0,"name){\r\n"],[1,"    //로드되는 페이지 이름 ex) user-pet:\r\n    //                         pet:\r\n    //                         user: .....\r\n"],[0,"    verb"]],"start1":205,"start2":205,"length1":16,"length2":130},{"diffs":[[0,", name);"],[1," "],[0,"\r\n    va"]],"start1":364,"start2":364,"length1":16,"length2":17}]],"length":2290,"saved":false}
{"ts":1360829957845,"patch":[[{"diffs":[[0,"  //"],[-1,"로드되는 페이지 이름"],[1,"컨트롤러 폴더하위 폴더 이름들 출력"],[0," ex)"]],"start1":215,"start2":215,"length1":19,"length2":27},{"diffs":[[0,"        "],[1,"   "],[1,"           "],[0,"pet:\r\n  "]],"start1":277,"start2":277,"length1":16,"length2":30},{"diffs":[[0,"    pet:\r\n    //"],[1,"              "],[0,"                "]],"start1":295,"start2":295,"length1":32,"length2":46}]],"length":2326,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360833994595,"patch":[[{"diffs":[[0,"        break;\r\n"],[1,"        case 'uiandwe':\r\n          method = 'get';\r\n          path = '/' + name;\r\n          break;\r\n"],[0,"        default:"]],"start1":1999,"start2":1999,"length1":32,"length2":132}]],"length":2426,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360843909327,"patch":[[{"diffs":[[0,"    path = '/' +"],[1," name+'/' +"],[0," name;\r\n        "]],"start1":2073,"start2":2073,"length1":32,"length2":43}]],"length":2437,"saved":false}
{"ts":1360844050854,"patch":[[{"diffs":[[0,"/' +"],[-1," name+'/' +"],[0," nam"]],"start1":2085,"start2":2085,"length1":19,"length2":8}]],"length":2426,"saved":false}
{"ts":1360844349541,"patch":[[{"diffs":[[0,"    path = '/' +"],[1," name+'/' +"],[0," name;\r\n        "]],"start1":2073,"start2":2073,"length1":32,"length2":43}]],"length":2437,"saved":false}
{"ts":1360844364618,"patch":[[{"diffs":[[0,"/' +"],[-1," name+'/' +"],[0," nam"]],"start1":2085,"start2":2085,"length1":19,"length2":8}]],"length":2426,"saved":false}
