{"ts":1360826158304,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1360826208836,"patch":[[{"diffs":[[1,"\r\nvar express = require('../..');\r\n\r\nvar app = module.exports = express();\r\n\r\n// settings\r\n\r\n// map .renderFile to \".html\" files\r\napp.engine('html', require('ejs').renderFile);\r\n\r\n// make \".html\" the default\r\napp.set('view engine', 'html');\r\n\r\n// set views for error and 404 pages\r\napp.set('views', __dirname + '/views');\r\n\r\n// define a custom res.message() method\r\n// which stores messages in the session\r\napp.response.message = function(msg){\r\n  // reference `req.session` via the `this.req` reference\r\n  var sess = this.req.session;\r\n  // simply add the msg to an array for later\r\n  sess.messages = sess.messages || [];\r\n  sess.messages.push(msg);\r\n  return this;\r\n};\r\n\r\n// log\r\nif (!module.parent) app.use(express.logger('dev'));\r\n\r\n// serve static files\r\napp.use(express.static(__dirname + '/public'));\r\n\r\n// session support\r\napp.use(express.cookieParser('some secret here'));\r\napp.use(express.session());\r\n\r\n// parse request bodies (req.body)\r\napp.use(express.bodyParser());\r\n\r\n// support _method (PUT in forms etc)\r\napp.use(express.methodOverride());\r\n\r\n// expose the \"messages\" local variable when views are rendered\r\napp.use(function(req, res, next){\r\n  var msgs = req.session.messages || [];\r\n\r\n  // expose \"messages\" local variable\r\n  res.locals.messages = msgs;\r\n\r\n  // expose \"hasMessages\"\r\n  res.locals.hasMessages = !! msgs.length;\r\n\r\n  /* This is equivalent:\r\n   res.locals({\r\n     messages: msgs,\r\n     hasMessages: !! msgs.length\r\n   });\r\n  */\r\n\r\n  // empty or \"flush\" the messages so they\r\n  // don't build up\r\n  req.session.messages = [];\r\n  next();\r\n});\r\n\r\n// load controllers\r\nrequire('./lib/boot')(app, { verbose: !module.parent });\r\n\r\n// assume \"not found\" in the error msgs\r\n// is a 404. this is somewhat silly, but\r\n// valid, you can do whatever you like, set\r\n// properties, use instanceof etc.\r\napp.use(function(err, req, res, next){\r\n  // treat as 404\r\n  if (~err.message.indexOf('not found')) return next();\r\n\r\n  // log it\r\n  console.error(err.stack);\r\n\r\n  // error page\r\n  res.status(500).render('5xx');\r\n});\r\n\r\n// assume 404 since no middleware responded\r\napp.use(function(req, res, next){\r\n  res.status(404).render('404', { url: req.originalUrl });\r\n});\r\n\r\nif (!module.parent) {\r\n  app.listen(3000);\r\n  console.log('\\n  listening on port 3000\\n');\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":2283}]],"length":2283,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360826612893,"patch":[[{"diffs":[[0,"re('"],[-1,"../.."],[1,"express"],[0,"');\r"]],"start1":21,"start2":21,"length1":13,"length2":15}]],"length":2285,"saved":false}
{"ts":1360826630002,"patch":[[{"diffs":[[0,"ent) {\r\n"],[-1,"  "],[0,"app.list"]],"start1":2207,"start2":2207,"length1":18,"length2":16},{"diffs":[[0,"ten("],[-1,"3000"],[1,"process.env.PORT"],[0,");"],[1," "],[0,"\r\n  "]],"start1":2222,"start2":2222,"length1":14,"length2":27}]],"length":2296,"saved":false}
{"ts":1360826785580,"patch":[[{"diffs":[[0,"ollers\r\n"],[1,"//"],[0,"require("]],"start1":1593,"start2":1593,"length1":16,"length2":18}]],"length":2298,"saved":false}
{"ts":1360826920494,"patch":[[{"diffs":[[0,"ollers\r\n"],[-1,"//"],[0,"require("]],"start1":1593,"start2":1593,"length1":18,"length2":16}]],"length":2296,"saved":false}
